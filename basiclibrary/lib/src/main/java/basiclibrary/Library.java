/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;




import java.util.*;


public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    //This is my test method to see if my tests were properly set up and working
    public int add(int numOne, int numTwo) {
        return numOne + numTwo;
    }


    // Roll method simulates rolling a die a desired amount of times returns array
    public int[] roll (int n){

        Random rando = new Random();

        int[] rolls = new int[n];

        for (int i = 0; i < n; i++) {
            int randoNum = rando.nextInt(6);
            rolls[i] = randoNum + 1;
        }
        return rolls;
    }

    //Duplicate array method return true if duplicates in array and false if not
    public boolean containsDuplicates (int[] arr) {
        for (int i = 0; i < arr.length; i++){
            for (int j = 1; j < arr.length; j++){
                if (i == j) continue;
                if (arr[i] == arr[j])
                    return true;
                }
            }
        return false;
    }
    //Global variables used in both average arrays
    double sum = 0;
    double counter = 0;
    //Average array method
    public double average (double[] arr) {
        for (double num : arr){
            sum += num;
            counter++;
        }
      return Math.ceil(sum / counter) ;
    }
    //Return minimum average of array of arrays
    public double arrayOfArrays (double[][] arr) {
        //storing averages in new array
        double[] averages = new double[arr.length];
        //2d array average
        for (int i = 0; i < arr.length; i++){
            for (int j = 0; j < arr[i].length; j++){
                sum += arr[i][j];
                counter++;
            }
            averages[i] = sum / counter;
        }
      //Getting Min value of the array
        double minValue = averages[0];
        for (double average : averages) {
            if (average < minValue) {
                minValue = average;
            }
        }
        return minValue ;
    }
    // getMin Method
    public int getMin (List<Integer> unique) {
        int minValue = (int) unique.get(0);
        for (int i = 0; i < unique.stream().count(); i++) {
                if ((int) unique.get(0) < minValue ) {
                    minValue = (int) unique.get(0);
                }
        }
        return minValue ;
    }
    //getMax method
    public int getMax (List<Integer> unique) {
        int maxValue = (int) unique.get(0);

            for (int i = 0; i < unique.stream().count(); i++) {
                if ((int) unique.get(i) > maxValue) {
                    maxValue = (int) unique.get(i);
                }
        }
        return maxValue;
    }
    // minMaxTemp Analyzes min and max temp and the missing temps that were not in data set
    public void minMaxTemp (int [][] arr) {
        Map<Integer, Integer> map = new LinkedHashMap<>();

        for (int[] row : arr)
            for (int col : row)
                map.put(col, map.getOrDefault(col, 0) + 1);

        List<Integer> unique = new ArrayList<>();

        for (Map.Entry<Integer, Integer> entry : map.entrySet())
            if (entry.getValue() == 1)
                unique.add(entry.getKey());

        Collections.sort(unique);
        System.out.println("minMaxTemp() unique values: " + unique);
        int maxTemp  = getMax(unique);
        int minTemp = getMin(unique);
        System.out.println("High: " + getMax(unique));
        System.out.println("Low: " + getMin(unique));
        for (int temp : unique) {
            if (temp != minTemp && temp <= maxTemp) {
                System.out.println("Never saw temperature: " + minTemp);
                minTemp++;
            }
            if (temp == minTemp && temp <= maxTemp) {
                minTemp++;
            }
        }
      }

    //tally gets the number of votes and declares the winner of the election
      public String tally (List<String> arr) {
          Map<String, Integer> votesMap = new LinkedHashMap<>();

          for (String vote : arr)
          {
              if (votesMap.containsKey(vote))
              {
                  int numOfTimes = votesMap.get(vote);
                  votesMap.put(vote, numOfTimes + 1);
              }
              else
              {
                  votesMap.put(vote, 1);
              }
          }
         System.out.println("tall() Votes: " + votesMap);
          return Collections.max(votesMap.entrySet(), Comparator.comparingInt(Map.Entry::getValue)).getKey();
      }
    }

