/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;



import java.util.Random;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    //This is my test method to see if my tests were properly set up and working
    public int add(int numOne, int numTwo) {
        return numOne + numTwo;
    }


    // Roll method simulates rolling a die a desired amount of times returns array
    public int[] roll (int n){

        Random rando = new Random();

        int[] rolls = new int[n];

        for (int i = 0; i < n; i++) {
            int randoNum = rando.nextInt(6);
            rolls[i] = randoNum + 1;
        }
        return rolls;
    }

    //Duplicate array method return true if duplicates in array and false if not
    public boolean containsDuplicates (int[] arr) {
        for (int i = 0; i < arr.length; i++){
            for (int j = 1; j < arr.length; j++){
                if (i == j) continue;
                if (arr[i] == arr[j])
                    return true;
                }
            }
        return false;
    }
    //Global variables used in both average arrays
    double sum = 0;
    double counter = 0;
    //Average array method
    public double average (double[] arr) {
        for (double num : arr){
            sum += num;
            counter++;
        }
      return Math.ceil(sum / counter) ;
    }
    //Return minimum average of array of arrays
    public double arrayOfArrays (double[][] arr) {
        //storing averages in new array
        double[] averages = new double[arr.length];
        //2d array average
        for (int i = 0; i < arr.length; i++){
            for (int j = 0; j < arr[i].length; j++){
                sum += arr[i][j];
                counter++;
            }
            averages[i] = sum / counter;
        }
      //Getting Min value of the array
        double minValue = averages[0];
        for (double average : averages) {
            if (average < minValue) {
                minValue = average;
            }
        }
        return minValue ;
    }
}
